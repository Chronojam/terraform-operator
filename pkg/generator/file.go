package generator

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"text/tabwriter"

	yaml "gopkg.in/yaml.v2"
)

type file struct {
	buffer *bytes.Buffer
	raw    []byte
}

func NewFile(packageName string) (*file, error) {
	ret := []byte{}
	buf := bytes.NewBuffer(ret)

	resource := &file{
		buffer: buf,
		raw:    ret,
	}

	err := resource.WriteToBuffer("// GENERATED BY TF-GENERATOR, DO NOT EDIT.\n")
	if err != nil {
		return nil, err
	}

	if packageName != "" {
		// Write out package name to the top of our file.
		err := resource.WriteToBuffer(fmt.Sprintf("package %s", packageName))
		if err != nil {
			return nil, err
		}
	}

	return resource, nil
}

func (res *file) WriteToBuffer(s string) error {
	_, err := fmt.Fprintln(res.buffer, s)
	if err != nil {
		return err
	}

	return nil
}

func (res *file) ToString() string {
	return string(res.buffer.Bytes())
}

func (res *file) WriteToFile(path string) error {
	return ioutil.WriteFile(path, res.buffer.Bytes(), 0755)
}

// Given a go object and a path, render it to a file,
// Takes an optional header string.
func ToFile(crd interface{}, path string) error {
	b, err := yaml.Marshal(crd)
	if err != nil {
		return err
	}

	w := new(tabwriter.Writer)
	buf := bytes.NewBuffer([]byte{})
	w.Init(buf, 0, 0, 2, ' ', 0)
	w.Write(b)
	w.Flush()

	f, err := NewFile("")
	if err != nil {
		return err
	}

	f.WriteToBuffer(string(buf.Bytes()))
	f.WriteToFile(path)

	return nil
}
