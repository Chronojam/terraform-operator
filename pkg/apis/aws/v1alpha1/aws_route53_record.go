// GENERATED BY TF-GENERATOR, DO NOT EDIT.

package v1alpha1

import (
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type AwsRoute53Record struct {
	meta_v1.TypeMeta   `json",inline"`
	meta_v1.ObjectMeta `json"metadata,omitempty"`
	Spec               AwsRoute53RecordSpec `json"spec"`
}

type AwsRoute53RecordSpec struct {
	SetIdentifier                 string                                         `json:"set_identifier"`
	LatencyRoutingPolicy          []AwsRoute53RecordSpecLatencyRoutingPolicy     `json:"latency_routing_policy"`
	GeolocationRoutingPolicy      []AwsRoute53RecordSpecGeolocationRoutingPolicy `json:"geolocation_routing_policy"`
	HealthCheckId                 string                                         `json:"health_check_id"`
	Type                          string                                         `json:"type"`
	ZoneId                        string                                         `json:"zone_id"`
	Ttl                           int                                            `json:"ttl"`
	Alias                         AwsRoute53RecordSpecAlias                      `json:"alias"`
	Failover                      string                                         `json:"failover"`
	WeightedRoutingPolicy         []AwsRoute53RecordSpecWeightedRoutingPolicy    `json:"weighted_routing_policy"`
	MultivalueAnswerRoutingPolicy bool                                           `json:"multivalue_answer_routing_policy"`
	AllowOverwrite                bool                                           `json:"allow_overwrite"`
	Name                          string                                         `json:"name"`
	Records                       string                                         `json:"records"`
	Fqdn                          string                                         `json:"fqdn"`
	FailoverRoutingPolicy         []AwsRoute53RecordSpecFailoverRoutingPolicy    `json:"failover_routing_policy"`
	Weight                        int                                            `json:"weight"`
}

type AwsRoute53RecordSpecLatencyRoutingPolicy struct {
	Region string `json:"region"`
}

type AwsRoute53RecordSpecGeolocationRoutingPolicy struct {
	Continent   string `json:"continent"`
	Country     string `json:"country"`
	Subdivision string `json:"subdivision"`
}

type AwsRoute53RecordSpecAlias struct {
	ZoneId               string `json:"zone_id"`
	Name                 string `json:"name"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
}

type AwsRoute53RecordSpecWeightedRoutingPolicy struct {
	Weight int `json:"weight"`
}

type AwsRoute53RecordSpecFailoverRoutingPolicy struct {
	Type string `json:"type"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type AwsRoute53RecordList struct {
	meta_v1.TypeMeta   `json",inline"`
	meta_v1.ObjectMeta `json"metadata,omitempty"`
	Items              []AwsRoute53Record `json"items"`
}
