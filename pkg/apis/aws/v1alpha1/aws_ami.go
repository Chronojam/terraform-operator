// GENERATED BY TF-GENERATOR, DO NOT EDIT.

package v1alpha1

import (
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type AwsAmi struct {
	meta_v1.TypeMeta   `json",inline"`
	meta_v1.ObjectMeta `json"metadata,omitempty"`
	Spec               AwsAmiSpec `json"spec"`
}

type AwsAmiSpec struct {
	Architecture         string                         `json:"architecture"`
	Description          string                         `json:"description"`
	VirtualizationType   string                         `json:"virtualization_type"`
	RootSnapshotId       string                         `json:"root_snapshot_id"`
	SriovNetSupport      string                         `json:"sriov_net_support"`
	ManageEbsSnapshots   bool                           `json:"manage_ebs_snapshots"`
	ImageLocation        string                         `json:"image_location"`
	KernelId             string                         `json:"kernel_id"`
	Name                 string                         `json:"name"`
	EphemeralBlockDevice AwsAmiSpecEphemeralBlockDevice `json:"ephemeral_block_device"`
	RamdiskId            string                         `json:"ramdisk_id"`
	RootDeviceName       string                         `json:"root_device_name"`
	EbsBlockDevice       AwsAmiSpecEbsBlockDevice       `json:"ebs_block_device"`
	Tags                 map[string]string              `json:"tags"`
}

type AwsAmiSpecEphemeralBlockDevice struct {
	DeviceName  string `json:"device_name"`
	VirtualName string `json:"virtual_name"`
}

type AwsAmiSpecEbsBlockDevice struct {
	Iops                int    `json:"iops"`
	SnapshotId          string `json:"snapshot_id"`
	VolumeSize          int    `json:"volume_size"`
	VolumeType          string `json:"volume_type"`
	DeleteOnTermination bool   `json:"delete_on_termination"`
	DeviceName          string `json:"device_name"`
	Encrypted           bool   `json:"encrypted"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type AwsAmiList struct {
	meta_v1.TypeMeta   `json",inline"`
	meta_v1.ObjectMeta `json"metadata,omitempty"`
	Items              []AwsAmi `json"items"`
}
