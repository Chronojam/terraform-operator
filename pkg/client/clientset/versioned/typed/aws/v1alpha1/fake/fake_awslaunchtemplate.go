/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/chronojam/terraform-operator/pkg/apis/aws/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAwsLaunchTemplates implements AwsLaunchTemplateInterface
type FakeAwsLaunchTemplates struct {
	Fake *FakeChronojamV1alpha1
	ns   string
}

var awslaunchtemplatesResource = schema.GroupVersionResource{Group: "chronojam.co.uk", Version: "v1alpha1", Resource: "awslaunchtemplates"}

var awslaunchtemplatesKind = schema.GroupVersionKind{Group: "chronojam.co.uk", Version: "v1alpha1", Kind: "AwsLaunchTemplate"}

// Get takes name of the awsLaunchTemplate, and returns the corresponding awsLaunchTemplate object, and an error if there is any.
func (c *FakeAwsLaunchTemplates) Get(name string, options v1.GetOptions) (result *v1alpha1.AwsLaunchTemplate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(awslaunchtemplatesResource, c.ns, name), &v1alpha1.AwsLaunchTemplate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AwsLaunchTemplate), err
}

// List takes label and field selectors, and returns the list of AwsLaunchTemplates that match those selectors.
func (c *FakeAwsLaunchTemplates) List(opts v1.ListOptions) (result *v1alpha1.AwsLaunchTemplateList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(awslaunchtemplatesResource, awslaunchtemplatesKind, c.ns, opts), &v1alpha1.AwsLaunchTemplateList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.AwsLaunchTemplateList{}
	for _, item := range obj.(*v1alpha1.AwsLaunchTemplateList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested awsLaunchTemplates.
func (c *FakeAwsLaunchTemplates) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(awslaunchtemplatesResource, c.ns, opts))

}

// Create takes the representation of a awsLaunchTemplate and creates it.  Returns the server's representation of the awsLaunchTemplate, and an error, if there is any.
func (c *FakeAwsLaunchTemplates) Create(awsLaunchTemplate *v1alpha1.AwsLaunchTemplate) (result *v1alpha1.AwsLaunchTemplate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(awslaunchtemplatesResource, c.ns, awsLaunchTemplate), &v1alpha1.AwsLaunchTemplate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AwsLaunchTemplate), err
}

// Update takes the representation of a awsLaunchTemplate and updates it. Returns the server's representation of the awsLaunchTemplate, and an error, if there is any.
func (c *FakeAwsLaunchTemplates) Update(awsLaunchTemplate *v1alpha1.AwsLaunchTemplate) (result *v1alpha1.AwsLaunchTemplate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(awslaunchtemplatesResource, c.ns, awsLaunchTemplate), &v1alpha1.AwsLaunchTemplate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AwsLaunchTemplate), err
}

// Delete takes name of the awsLaunchTemplate and deletes it. Returns an error if one occurs.
func (c *FakeAwsLaunchTemplates) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(awslaunchtemplatesResource, c.ns, name), &v1alpha1.AwsLaunchTemplate{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAwsLaunchTemplates) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(awslaunchtemplatesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.AwsLaunchTemplateList{})
	return err
}

// Patch applies the patch and returns the patched awsLaunchTemplate.
func (c *FakeAwsLaunchTemplates) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AwsLaunchTemplate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(awslaunchtemplatesResource, c.ns, name, data, subresources...), &v1alpha1.AwsLaunchTemplate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AwsLaunchTemplate), err
}
